"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
import os.path
import json
from pathlib import Path

import SECRET
from django.core.exceptions import ImproperlyConfigured
from django.core.management.utils import get_random_secret_key

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

#secret_config/secret.json 파일 로딩
SECRET_FILE = os.path.join(BASE_DIR, 'secret_config', 'secret.json')
try:
    with open(SECRET_FILE) as f:
        _secret = json.loads(f)
except FileNotFoundError:
    raise ImproperlyConfigured(f"Secret file not found at {SECRET_FILE}")

def get_secret(setting, secret=_secret):
    try:
        return secret[setting]
    except KeyError:
        raise ImproperlyConfigured(f"Set the {setting} in secret.json file")
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = get_secret('DJANGO_SECRET_KEY')


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

DJANGO_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

CUSTOM_APPS = [
    'todo',
    'users',
    'accounts',
]

THIRD_PARTY_APPS = [
    'django_extensions',
    'django_summernote',
    'django_cleanup',

]

INSTALLED_APPS = DJANGO_APPS + CUSTOM_APPS + THIRD_PARTY_APPS

AUTH_USER_MODEL = 'users.User'

# email
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.naver.com'
EMAIL_PORT = 587
EMAIL_HOST_USER = SECRET['EMAIL']['USER']
EMAIL_HOST_PASSWORD = SECRET['EMAIL']['PASSWORD']
EMAIL_USE_TLS = True
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR), 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
MEDIA_URL = 'media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LOGIN_REDIRECT_URL = '/cbv/todo/'
LOGOUT_REDIRECT_URL = '/accounts/login/'

SUMMERNOTE_CONFIG = {
 'iframe': True,
 'attachment_upload_to': 'summernote_uploads/',  # 👈 media/summernote_uploads 폴더에 저장됨

 'summernote': {
     'airMode': False,
     'width': '100%',
     'height': '480',


     'toolbar': [
['style', ['style']],                      # 스타일 설정
            ['font', ['bold', 'underline', 'clear']],  # 글꼴 설정: 굵게, 밑줄, 지우기
            ['color', ['color']],                      # 색상 설정
            ['para', ['ul', 'ol', 'paragraph']],       # 문단 설정: 글머리 기호, 번호 매기기, 문단
            ['table', ['table']],                      # 표 삽입
            ['insert', ['link', 'picture']],           # 삽입 기능: 링크, 그림
            ['view', ['fullscreen']],                  # 보기 설정: 전체 화면
        ],

     'lang': 'ko-KR',

'codemirror': {
            'mode': 'htmlmixed',     # 코드미러의 모드를 htmlmixed로 설정
            'lineNumbers': 'true',   # 코드미러에서 줄 번호를 표시
            'theme': 'monokai',      # 코드미러의 테마를 monokai로 설정
        },
    },


   # 첨부파일 인증 필요 여부 설정
    'attachment_require_authentication': True,

    # 첨부파일 기능 비활성화 설정
    'disable_attachment': False,

    # 첨부파일의 절대경로 URI 사용 설정
    'attachment_absolute_uri': True,
}

# .secret_config/secret.json
{
 "DJANGO_SECRET_KEY": "your secretkey here",
 "EMAIL": {
 "USER": "your email here",
 "PASSWORD": "your email password here"
  }
}
